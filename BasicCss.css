/*  There are three main ways to apply CSS styling. You can apply inline styles directly to HTML elements with the style attribute. Alternatively, you can place CSS rules within style tags in an HTML document. Finally, you can write CSS rules in an external style sheet, then reference that file in the HTML document. Even though the first two options have their use cases, most developers prefer external style sheets because they keep the styles separate from the HTML elements. This improves the readability and reusability of your code. */

/* Classes are reusable styles that can be added to HTML elements.  Note that in your CSS style element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.*/
/*In addition to classes, each HTML element can also have an id attribute. There are several benefits to using id attributes: You can use an id to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.
id attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same id attribute. */

/*Using Google fonts, import link by referencing the font's url.Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the "Open Sans" font, but not to use the Lobster font.*/
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">

/*:root is a pseudo-class selector that matches the root element of the document, usually the html element. By creating your variables in :root, they will be available globally and can be accessed from any other selector in the style sheet.*/
:root{
      /*CSS variables are a powerful way to change many CSS style properties at once. to use variable, use var()*/
      --penguin-skin: gray;
      --penguin-belly: white;
      --penguin-beak: orange;
}
h1{
      color: red;
      font-size: 30px;
      /*generic font families include monospace, serif and sans-serif. You can use these to degrade fonts if original font is not available*/
      font-family: Lobster, sans-serif;
}

/*class*/
.red-text{
      color:red;
}
 p {
    font-size: 16px;
    font-family: monospace;
  }

/*Adding borders */
  .thick-green-border {
    border-color: green;
    border-width: 10px;
    border-style: solid;
    /*making border rounded*/
    border-radius: 10px;
  }

  .smaller-image {
    width: 100px;
  }
/*Adding background colors */
  .silver-background {
  background-color: silver;
}

 /*To style an ID, use # */
#cat-photo-form{
  background-color:green;
}

.blue-box {
  background-color: blue;
  color: #fff;
  /*An element's padding controls the amount of space between the element's content and its border. These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.*/
  padding: 10px 20px 10px 20px;
  /*An element's margin controls the amount of space between an element's border and surrounding elements.*/
  margin: 20px;
}

/*This selector matches and styles elements with a specific attribute value.*/
[type="checkbox"]{
  margin: 10px 0 15px 0;
}

/*Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.
Relative units, such as em or rem, are relative to another length value. For example, em is based on the size of an element's font. If you use it to set the font-size property itself, it's relative to the parent's font-size. */
.red-box {
  background-color: red;
  margin: 20px 40px 20px 40px;
  padding:1.5em;
}

/*Precedence for styles is:"!important", Inline styles, ID, classes. CSS is read from top to bottom, so whatever style is last will override everything above.*/
.pink-text {
  color: pink !important;
}

.penguin {
  position: relative;
  margin: auto;
  display: block;
  margin-top: 5%;
  width: 300px;
  height: 300px;
  /*second value is a fallback */
  background: var(--penguin-skin,black);
}

/*when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.*/
@media (max-width: 350px) {
  :root {
    --penguin-size:200px;
  }
}
